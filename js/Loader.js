// Generated by CoffeeScript 1.9.1
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function(require) {
  var $, Backbone, Event, Handlebars, Loader, Magnifier, WeSaas, WidgetContainer, _;
  $ = require('jquery');
  _ = require('underscore');
  Backbone = require('backbone');
  Handlebars = require('handlebars.runtime');
  Event = require('Event');
  Magnifier = require('Magnifier');
  WidgetContainer = require('WidgetContainer');
  WeSaas = require('WeSaas');
  Handlebars.registerHelper('equals', function(lvalue, rvalue, options) {
    if (arguments.length < 3) {
      throw new Error('Handlebars Helper equal needs 2 parameters');
    }
    if (lvalue !== rvalue) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });
  Handlebars.partials = Handlebars.templates;
  return Loader = (function(superClass) {
    extend(Loader, superClass);

    function Loader() {
      return Loader.__super__.constructor.apply(this, arguments);
    }

    Loader.prototype.className = 'we-vision-loader';

    Loader.prototype.initialize = function() {
      if (config && config.mode && config.mode === 'debug') {
        console.time("WideEyesWidget");
      }
      _.bindAll(this);
      return this.render();
    };

    Loader.prototype.render = function() {
      var widget_container;
      $("#widget").prepend(this.el);
      widget_container = new WidgetContainer({
        model: products,
        product_id: product_id,
        conf: config
      });
      this.$el.append(widget_container.render().el);
      widget_container.show();
      this._applyStyling();
      if (config.image.magnifier) {
        this._activateMagnifier();
      }
      return this;
    };

    Loader.prototype._activateMagnifier = function() {
      var evt, m, prev;
      evt = new Event;
      m = new Magnifier(evt);
      m.attach({
        thumb: ".productsImage",
        largeWrapper: 'preview',
        zoomable: true
      });
      prev = $('#preview');
      return $(window).mousemove(function(event) {
        var body, doc, eventDoc;
        event = event || window.event;
        if (event.pageX === null && event.clientX !== null) {
          eventDoc = event.target && event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;
          event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }
        return prev.offset({
          top: event.pageY,
          left: event.pageX - prev.width() / 2
        });
      });
    };

    Loader.prototype._applyStyling = function() {
      var style;
      style = document.createElement('style');
      document.head.appendChild(style);
      this.styleSheet = style.sheet;
      if (config.type) {
        this._insertTypeStyles();
      }
      if (config.layout.isCentered) {
        $('.grid').css('margin', '0 auto');
      }
      if (config.layout.minColumnCount) {
        this._applyCustomLayout(config.layout.minColumnCount, config.layout.responsize);
      }
      if (config.image) {
        return this._applyCustomImageStyling();
      }
    };

    Loader.prototype._applyCustomImageStyling = function() {
      var imgSizeRule, maxHeight, maxWidth;
      maxWidth = config.image["max-width"] ? config.image["max-width"] : '';
      maxHeight = config.image["max-height"] ? config.image["max-height"] : '';
      imgSizeRule = '.card .image-container img { max-width: ' + maxWidth + 'px; max-height: ' + maxHeight + 'px; }';
      return this.styleSheet.insertRule(imgSizeRule, this.styleSheet.cssRules.length - 1);
    };

    Loader.prototype._applyCustomLayout = function(colCount, responsive) {
      if (colCount === 8) {
        $('.card').addClass('col-xs-1-8');
        return $('.grid').css('max-width', '1600px');
      } else if (colCount === 5) {
        $('.card').addClass('col-xs-1-5');
        $('.grid').css('max-width', '1200px');
        if (responsive) {
          return $('.card').addClass('col-lg-8');
        }
      } else if (colCount === 4) {
        $('.card').addClass('col-xs-1-4');
        $('.grid').css('max-width', '1024px');
        if (responsive) {
          return $('.card').addClass('col-lg-8');
        }
      } else if (colCount === 2) {
        $('.card').addClass('col-xs-1-2');
        $('.grid').css('max-width', '768px');
        if (responsive) {
          return $('.card').addClass('col-md-1-4 col-lg-8');
        }
      } else if (colCount === 1) {
        $('.card').addClass(' col-xs-1-1');
        $('.grid').css('max-width', '550px');
        if (responsive) {
          return $('.card').addClass('col-sm-1-2 col-md-1-4 col-lg-1-8');
        }
      } else {
        $('.card').addClass('col-xs-1-1 col-sm-1-2 col-md-1-4');
        return $('.grid').css('max-width', '1024px');
      }
    };

    Loader.prototype._insertTypeStyles = function() {
      var bodyRule, displayHeader, ff, ffName, ffRule, ffUrl, fontColor, fontFamily, fontSize, fontWeight, headerFontSize, headerRule, letterSpacing, textTransform, type;
      type = config.type ? config.type : null;
      if (!type) {
        return false;
      }
      fontFamily = type['font-family'] ? type['font-family'] : '';
      fontSize = type['font-size'] ? type['font-size'] : '';
      fontColor = type['color'] ? type['color'] : '';
      displayHeader = type.title['display'] ? 'block' : 'none';
      letterSpacing = type.title['letter-spacing'] ? type.title['letter-spacing'] : '';
      headerFontSize = type.title['font-size'] ? type.title['font-size'] : '';
      fontWeight = type.title['font-weight'] ? type.title['font-weight'] : '';
      textTransform = type.title['transform'] ? type.title['transform'] : '';
      bodyRule = 'body { font-family: ' + fontFamily + '; font-size: ' + fontSize + 'px; color: ' + fontColor + '; }';
      headerRule = '.grid > h2 { display: ' + displayHeader + '; letter-spacing: ' + letterSpacing + 'em; text-transform: ' + textTransform + '; font-size: ' + headerFontSize + 'px; font-weight: ' + fontWeight + '; }';
      this.styleSheet.insertRule(headerRule, 0);
      this.styleSheet.insertRule(bodyRule, 0);
      ff = type['font-face'] ? type['font-face'] : null;
      if (ff) {
        ffUrl = ff.url ? ff.url : '';
        if (ffUrl.indexOf('http') > -1) {
          ffRule = "@import '" + ffUrl + "';";
        } else {
          ffName = ff.name ? ff.name : '';
          ffRule = "@font-face { font-family: " + ffName + "; src: url(" + ffUrl + "); }";
        }
        return this.styleSheet.insertRule(ffRule, 0);
      }
    };

    return Loader;

  })(Backbone.View);
});
