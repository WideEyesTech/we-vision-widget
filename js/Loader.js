// Generated by CoffeeScript 1.9.1
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function(require) {
  var $, Backbone, Handlebars, Loader, WeSaas, WidgetContainer, _;
  $ = require('jquery');
  _ = require('underscore');
  Backbone = require('backbone');
  Handlebars = require('handlebars.runtime');
  WidgetContainer = require('WidgetContainer');
  WeSaas = require('WeSaas');
  Handlebars.registerHelper('equals', function(lvalue, rvalue, options) {
    if (arguments.length < 3) {
      throw new Error('Handlebars Helper equal needs 2 parameters');
    }
    if (lvalue !== rvalue) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });
  Handlebars.partials = Handlebars.templates;
  return Loader = (function(superClass) {
    extend(Loader, superClass);

    function Loader() {
      return Loader.__super__.constructor.apply(this, arguments);
    }

    Loader.prototype.className = 'we-widget-loader';

    Loader.prototype.initialize = function() {
      if (glbWeConfig && glbWeConfig.mode && glbWeConfig.mode === 'debug') {
        console.time("WideEyesWidget");
      }
      _.bindAll(this);
      return this.render();
    };

    Loader.prototype.render = function(customConfig) {
      var widget_container;
      $("#widget .we-widget-loader").empty();
      $("#widget").prepend(this.el);
      widget_container = new WidgetContainer({
        model: products,
        product_id: product_id,
        conf: customConfig || glbWeConfig
      });
      this.$el.append(widget_container.render().el);
      widget_container.show();
      if (customConfig) {
        this._applyStyling(customConfig);
      } else {
        this._applyStyling(glbWeConfig);
      }
      return this;
    };

    Loader.prototype._applyStyling = function(config) {
      if (config.layout.isCentered) {
        $('.grid').css('margin', '0 auto');
      }
      if (config.type) {
        this._insertTypeStyles(config.type);
      }
      if (config.layout.columnCount) {
        return this._applyCustomLayout(config);
      }
    };

    Loader.prototype._applyCustomLayout = function(config) {
      var cardRule, imgRule, mediaRule, style, styleSheet;
      style = document.getElementsByTagName('style');
      styleSheet = style[0].sheet;
      $('.card').addClass('col-xs-1-' + config.layout.mobileColumnCount);
      if (config.layout.columnCount === 8) {
        $('.card').addClass('col-sm-1-2 col-md-1-4 col-lg-1-8');
        $('.grid').css('max-width', '1600px');
        cardRule = '.card { height: 300px; }';
        imgRule = '.image-container img { max-height: 220px; }';
        mediaRule = '@media (min-width: 1024px) { .card { height: auto; } .image-container img { max-height: none; } }';
        styleSheet.insertRule(mediaRule, 0);
        styleSheet.insertRule(cardRule, 0);
        styleSheet.insertRule(imgRule, 0);
      } else if (config.layout.columnCount === 4) {
        $('.card').addClass('col-sm-1-2 col-md-1-4');
        $('.grid').css('max-width', '1024px');
        cardRule = '.card { height: 300px; }';
        imgRule = '.image-container img { max-height: 220px; }';
        mediaRule = '@media (min-width: 768px) { .card { height: auto; } .image-container img{ max-height: none; } }';
        styleSheet.insertRule(mediaRule, 0);
        styleSheet.insertRule(cardRule, 0);
        styleSheet.insertRule(imgRule, 0);
      } else if (config.layout.columnCount === 2) {
        $('.card').addClass(' col-sm-1-2');
        $('.grid').css('max-width', '768px');
        cardRule = '.card { height: 300px; }';
        imgRule = '.image-container img { max-height: 220px; }';
        mediaRule = '@media (min-width: 550px) { .card { height: auto; } .image-container img { max-height: none; } }';
        styleSheet.insertRule(mediaRule, 0);
        styleSheet.insertRule(cardRule, 0);
        styleSheet.insertRule(imgRule, 0);
      } else if (config.layout.columnCount === 1) {
        $('.card').addClass(' col-sm-1-1');
        $('.grid').css('max-width', '550px');
      } else {
        $('.card').addClass(' col-sm-1-2 col-md-1-4');
        $('.grid').css('max-width', '1024px');
        cardRule = '.card { height: 300px; }';
        imgRule = '.image-container img { max-height: 220px; }';
        mediaRule = '@media (min-width: 768px) { .card { height: auto; } .image-container img{ max-height: none; } }';
        styleSheet.insertRule(mediaRule, 0);
        styleSheet.insertRule(cardRule, 0);
        styleSheet.insertRule(imgRule, 0);
      }
      if (!config.layout.hasTitle) {
        return $('.grid > h2').css('display', 'none');
      }
    };

    Loader.prototype._insertTypeStyles = function(type) {
      var fontColor, fontFamily, fontSize, style, styleSheet, typeRule;
      style = document.createElement('style');
      document.head.appendChild(style);
      styleSheet = style.sheet;
      fontFamily = type && type['font-family'] ? type['font-family'] : '';
      fontSize = type && type['font-size'] ? type['font-size'] : '';
      fontColor = type && type['color'] ? type['color'] : '';
      typeRule = 'body { font-family: ' + fontFamily + '; font-size: ' + fontSize + 'px; color: ' + fontColor + '; }';
      return styleSheet.insertRule(typeRule, 0);
    };

    return Loader;

  })(Backbone.View);
});
